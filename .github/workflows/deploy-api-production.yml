name: Deploy API configuration to production environment

on: pull_request

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: windows-latest
    environment: prod
    steps:
      - name: checkout code
        uses: actions/checkout@v3

      - name: Login to Azure
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }} 
          enable-AzPSSession: true

      - name: Load parameter
        uses: azure/powershell@v1
        with:
          inlineScript: |
            $para = (Get-Content ./echo-api-armdeploy.prod.parameters.json | ConvertFrom-Json ).parameters

            $prodApimName = $para.apimServiceName.value
            echo "PROD_APIMNAME=$prodApimName" >> $env:GITHUB_ENV

            $prodStrAccName = $para.storageAccountName.value
            echo "PROD_STRACCNAME=$prodStrAccName" >> $env:GITHUB_ENV

            $bakContainer = $para.backupContainerName.value
            echo "PROD_BAKCONTAINER=$bakContainer" >> $env:GITHUB_ENV

            $prodrg = (Get-AzStorageAccount | where { $_.StorageAccountName -eq $prodStrAccName })[0].ResourceGroupName
            echo "PROD_RG=$prodrg" >> $env:GITHUB_ENV

            $targetApi = $para.targetApiName.value
            echo "TARGET_API=$targetApi" >> $env:GITHUB_ENV

            $targetRevision = $para.targetApiRevision.value
            echo "TARGET_REVISION=$targetRevision" >> $env:GITHUB_ENV

            $containerName = [DateTime]::Now.ToString("yyyyMMdd-HHmmss")
            echo "CONTAINER_NAME=$containerName" >> $env:GITHUB_ENV

          azPSVersion: "latest"

      - name: 'Backup production API Management contents'
        uses: azure/powershell@v1
        with:
          inlineScript: |
             .\ops-apim.ps1 -backup -sourceapim $env:PROD_APIMNAME `
                -storageAccountName $env:PROD_STRACCNAME -containerName $env:PROD_BAKCONTAINER
          azPSVersion: "latest"

      - name: 'Upload Blob contents'
        uses: azure/powershell@v1
        with:
          inlineScript: |
            Write-Host "Creating container $env:CONTAINER_NAME"
            $strAccKey = (Get-AzStorageAccountKey -ResourceGroupName $env:PROD_RG -Name $env:PROD_STRACCNAME)[0].Value
            $strctx = New-AzStorageContext -StorageAccountName $env:PROD_STRACCNAME -StorageAccountKey $strAccKey
            $container = New-AzStorageContainer -Context $strctx -Name $env:CONTAINER_NAME

            Write-Host ("Upload linked template for {0};rev={1}" -f $env:TARGET_API, $env:TARGET_REVISION)
            $templateRoot = ".\{0}\{0};rev={1}"  -f $env:TARGET_API, $env:TARGET_REVISION
            Get-ChildItem $templateRoot -Recurse | where {$_ -is [System.IO.FileInfo]} `
            | foreach {
                $blob = [System.IO.Path]::GetRelativePath($templateRoot, $_.Fullname).Replace("\", "/")
                Set-AzStorageBlobContent -File $_.Fullname -Container $env:CONTAINER_NAME -Blob "$blob" -Context $strctx 
            } `
            | Format-Table

            Write-Host "generate container sas"
            [DateTime]$exp = [DateTime]::UtcNow.AddMinutes(10)
            $sastoken = New-AzStorageContainerSASToken -Context $strctx -Name $env:CONTAINER_NAME -Permission r -ExpiryTime $exp
            echo "SAS_TOKEN=$sastoken" >> $env:GITHUB_ENV
          azPSVersion: "latest"

      - name: 'Deploy API configuration'
        uses: azure/powershell@v1
        with:
          inlineScript: |
            $deploymentName = "api-$($env:CONTAINER_NAME)"

            New-AzResourceGroupDeployment -Name $deploymentName -ResourceGroupName $env:PROD_RG `
              -TemplateFile .\armdeploy.prod.json -TemplateParameterFile .\echo-api-armdeploy.prod.parameters.json `
              -linkedTemplateContainerName $env:CONTAINER_NAME -storageSasToken $env:SAS_TOKEN 
          azPSVersion: "latest"
